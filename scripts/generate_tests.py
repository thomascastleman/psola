#!/bin/env python3

import argparse
from typing import List, Union


def number_to_identifier(number: Union[int, float]) -> str:
    """Converts a number to a string acceptable for use in a Rust identifier"""
    return str(number).replace(".", "_")


def generate_single_test(
    source_frequency: float,
    target_frequency: float,
    buffer_size: int,
    sample_rate: int,
) -> str:
    """Generates a single invocation of the test case macro for the given parameters"""
    test_name = f"shift_{number_to_identifier(source_frequency)}_to_{number_to_identifier(target_frequency)}_buffer_size_{number_to_identifier(buffer_size)}_sample_rate_{number_to_identifier(sample_rate)}"
    return f"test_pure_sine!({test_name}, {source_frequency}, {target_frequency}, {buffer_size}, {sample_rate});"


def generate_tests(
    source_frequencies: List[float],
    target_frequencies: List[float],
    buffer_sizes: List[int],
    sample_rates: List[int],
) -> List[str]:
    """Generates a test case for every combination of the given parameters"""
    tests = []
    for source in source_frequencies:
        for target in target_frequencies:
            for buffer_size in buffer_sizes:
                for sample_rate in sample_rates:
                    tests.append(
                        generate_single_test(
                            source, target, buffer_size, sample_rate
                        )
                    )
    return tests


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="generate_tests.py",
        description="Generate test case macro invocations for combinations of frequencies, buffer sizes, and sample rates.",
    )
    args = parser.parse_args()

    # Range from A3 to A4
    FREQUENCIES = [
        440.0,
        415.3047,
        391.9954,
        369.9944,
        349.2282,
        329.6276,
        311.127,
        293.6648,
        277.1826,
        261.6256,
        246.9417,
        233.0819,
        220.0,
    ]

    BUFFER_SIZES = [512, 1024]
    SAMPLE_RATES = [44100]

    print("// The below test cases were generated by generate_tests.py")
    for test in generate_tests(
        FREQUENCIES, FREQUENCIES, BUFFER_SIZES, SAMPLE_RATES
    ):
        print(test)
